MultiTargetFrameworkDemo
============
演示项目，演示如何创建面向多目标框架的项目，同时如何将它们用nuget打包发布。

## MultiTarget

关键都在MultiTarget.csproj中:

#### 更改输出文件夹
```
<OutputPath>bin\$(Configuration)\$(TargetFrameworkVersion.Replace("v", "NET").Replace(".", ""))\</OutputPath>
```
在输出文件夹下将只会出现NET35, NET40等目录。

#### 增加定义编译常量
```
<!-- ################################# Begin of MultiTarget ############################################## -->
  <PropertyGroup>
    <FrameworkNumber>$(TargetFrameworkVersion.Replace("v", "").Replace(".", ""))</FrameworkNumber>
    <DefineConstants Condition=" !$(DefineConstants.Contains(';NET')) ">$(DefineConstants);$(TargetFrameworkVersion.Replace("v", "NET").Replace(".", ""))</DefineConstants>
    <Framework Condition=" '$(Framework)' == '' ">$(TargetFrameworkVersion.Replace("v", "NET").Replace(".", "_"))</Framework>
    <DefineConstants Condition=" $(FrameworkNumber) &gt;= 20 ">$(DefineConstants);NET20_OR_ABOVE</DefineConstants>
    <DefineConstants Condition=" $(FrameworkNumber) &gt;= 35 ">$(DefineConstants);NET35_OR_ABOVE</DefineConstants>
    <DefineConstants Condition=" $(FrameworkNumber) &gt;= 40 ">$(DefineConstants);NET40_OR_ABOVE</DefineConstants>
    <DefineConstants Condition=" $(FrameworkNumber) &gt;= 45 ">$(DefineConstants);NET45_OR_ABOVE</DefineConstants>
    <DefineConstants Condition=" $(FrameworkNumber) &gt;= 451 ">$(DefineConstants);NET451_OR_ABOVE</DefineConstants>
    <DefineConstants Condition=" $(FrameworkNumber) &gt;= 452 ">$(DefineConstants);NET452_OR_ABOVE</DefineConstants>
  </PropertyGroup>
<!-- ################################# End of MultiTarget ############################################## -->
```
可在代码中通过这些编译常量来区分不同的目标框架:
```
#if NET35_OR_ABOVE
using System.Linq;
#endif

#if NET40_OR_ABOVE
using System.Threading.Tasks;
#endif
```
#### 修改引用的HintPath
```
<Reference Include="log4net">
      <HintPath>..\packages\log4net.2.0.3\lib\net40-full\log4net.dll</HintPath>
</Reference>
```
So log4net in net40 can be referenced by NET40_OR_ABOVE.

#### 增加RequiredTargetFramework
```
<Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
</Reference>
```

## MultiNuPack
#### 修改 nuget spec 文件
除非你指明，否则Nuget 将不会做以下的事件.

1. 打包所有的目标框架.
2. 打包不在lib文件夹下的文件.
3. 设置app.config 或 web.config.


因此我们需要在nuget spec文件中指明:
```
<files>
    <file src="bin\Release\**\*.*" target="lib" />
    <file src="NativeBinaries\**\*.*" target="NativeBinaries" />
    <file src="Content\**\*.*" target="Content" />
    <file src="Tools\**\*.*" target="Tools" />
    <file src="Resource\**\*.*" target="Resource" />
</files>
```
#### 在Content文件夹下增加transform文件
包安装结束后，Nuget会将app.config.transform文件中的内容添加到app.setting中，web.config.transform添加到web.config中.

#### 在Tools文件夹下增加install scripts
这些脚本会告诉nuget哪些文件需要拷贝到目标文件夹（比如log4net的配置文件）.

#### 偏好Release配置
nuget默认会打包Debug输出，我们可以指定用Release输出.
```
nuget pack MultiTarget.csproj -Prop Configuration=Release -Symbols
```

#That's all
Have fun!

（我将会开发一个Visual Studio的插件[MultiTargetFrameworkManager](https://github.com/chariothy/MultiTargetFrameworkManager "")，用于管理多目标框架项目）